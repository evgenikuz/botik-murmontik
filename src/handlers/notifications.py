import asyncio

import aiosqlite

from src.modules.admin import DB_PATH
from src.modules.functions import check_user_registered, get_notification_status, set_notification_status, \
    set_work_schedule, is_working_day
from src.modules.keyboards import create_main_keyboard, get_schedule_keyboard
from src.modules.logger import logger
from aiogram import Router, F, types, Bot
from datetime import datetime, time


notifications_router = Router()


@notifications_router.message(F.text.in_(['–ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –¥–µ–π–ª–∏ –∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏',
                                              '–û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–π–ª–∏ –∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏']))
async def toggle_reminders(message: types.Message):
    if not await check_user_registered(message.from_user.id):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ –æ–±—â–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return

    user_id = message.from_user.id
    current_status = await get_notification_status(user_id)

    if current_status:
        # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await set_notification_status(user_id, False)
        await set_work_schedule(user_id, None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫

        kb = create_main_keyboard(False)
        await message.answer(
            '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!',
            reply_markup=kb
        )
    else:
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã
        await ask_work_schedule(message)


async def ask_work_schedule(message: types.Message):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = get_schedule_keyboard()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:",
        reply_markup=keyboard
    )


@notifications_router.callback_query(F.data.startswith("schedule_"))
async def process_schedule(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã"""
    user_id = callback.from_user.id
    schedule_type = callback.data

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –ë–î –∏ –≤–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await set_work_schedule(user_id, schedule_type)
    await set_notification_status(user_id, True)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    schedule = schedule_type.replace("schedule_", "").replace("_", "-")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = create_main_keyboard(True)

    await callback.message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ –≥—Ä–∞—Ñ–∏–∫—É {schedule}",
        reply_markup=kb
    )
    await callback.answer()


async def send_reminder(user_id: int, text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        bot = get_bot_instance()  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç
        print("–¥–æ—à–ª–∏ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏")
        print(bot_instance)
        if bot_instance:
            print("–µ—Å–ª–∏ –±–æ—Ç –∏–Ω—Å—Ç–∞–Ω—Å")
            await bot.send_message(user_id, text)
    except Exception as e:
        logger.error(f"Error sending reminder to user {user_id}: {e}")


async def check_and_send_reminders(bot: Bot):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    while True:
        try:
            now = datetime.now()
            current_time = now.time()

            if not is_working_day(now):
                await asyncio.sleep(6 * 3600)
                continue

            users = await get_users_with_notifications()

            for user_id, schedule_type in users:
                await process_user_schedule(bot, user_id, schedule_type, current_time)

            await asyncio.sleep(60)

        except asyncio.CancelledError:
            logger.info("Reminder task cancelled")
            break
        except Exception as e:
            logger.error(f"Error in reminder task: {e}")
            await asyncio.sleep(60)


async def get_users_with_notifications() -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            '''SELECT user_id, work_schedule 
               FROM users 
               WHERE receives_notifications = 1 AND work_schedule IS NOT NULL'''
        )
        users = await cursor.fetchall()
        await cursor.close()
    return users


async def process_user_schedule(bot: Bot, user_id: int, schedule_type: str, current_time: time):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if schedule_type == "schedule_9_18":
            if time(9, 0) <= current_time < time(9, 1):
                await bot.send_message(user_id, '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å! üåû')
            elif time(11, 58) <= current_time < time(11, 59):
                await bot.send_message(user_id, '–ê –≤–æ—Ç –∏ —è! –ü–æ–º–Ω–∏—à—å –ø—Ä–æ –¥–µ–π–ª–∏–∫? ü§ì')
            elif time(13, 0) <= current_time < time(13, 1):
                await bot.send_message(
                    user_id,
                    '–í—Ä–µ–º—è –æ–±–µ–¥–∞! –ù–µ –∑–∞–±—É–¥—å —Å–ø–∏—Å–∞—Ç—å —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã –≤ Jira –∏ '
                    '–ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∫–∏!'
                )
            elif time(17, 50) <= current_time < time(17, 51):
                await bot.send_message(
                    user_id,
                    '–ú—è—É! –ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å—ë! –ù–µ –∑–∞–±—É–¥—å —Å–ø–∏—Å–∞—Ç—å —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã –≤ Jira '
                    '–∏ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∫–∏. –ü–æ–∫–∞!'
                )

        elif schedule_type == "schedule_10_19":
            if time(10, 0) <= current_time < time(10, 1):
                await bot.send_message(user_id, '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å! üåû')
            elif time(11, 58) <= current_time < time(11, 59):
                await bot.send_message(user_id, '–ê –≤–æ—Ç –∏ —è! –ü–æ–º–Ω–∏—à—å –ø—Ä–æ –¥–µ–π–ª–∏–∫? ü§ì')
            elif time(14, 0) <= current_time < time(14, 1):
                await bot.send_message(
                    user_id,
                    '–í—Ä–µ–º—è –æ–±–µ–¥–∞! –ù–µ –∑–∞–±—É–¥—å —Å–ø–∏—Å–∞—Ç—å —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã –≤ Jira –∏ '
                    '–ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∫–∏!'
                )
            elif time(18, 50) <= current_time < time(18, 51):
                await bot.send_message(
                    user_id,
                    '–ú—è—É! –ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å—ë! –ù–µ –∑–∞–±—É–¥—å —Å–ø–∏—Å–∞—Ç—å —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã –≤ Jira '
                    '–∏ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∫–∏. –ü–æ–∫–∞!'
                )
    except Exception as e:
        logger.error(f"Failed to send message to user {user_id}: {e}")

