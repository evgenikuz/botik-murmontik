import asyncio
import random

import aiosqlite
from aiogram.types import ReplyKeyboardRemove

from src.modules.admin import DB_PATH
from src.modules.constants import goodbyes, FANTIK_REACTIONS, SPECIAL_EVENTS
from src.modules.functions import check_user_registered, get_notification_status
from aiogram import Router, F, types

from src.modules.keyboards import create_main_keyboard, create_game_keyboard

play_router = Router()


@play_router.message(F.text == '–ë–µ–≥–∞—Ç—å –∑–∞ —Ñ–∞–Ω—Ç–∏–∫–æ–º')
async def play(message: types.Message):
    if not await check_user_registered(message.from_user.id):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ –æ–±—â–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return

    await message.answer(
        "üê± –£—Ä–∞-–∞-–∞! *–ø—Ä–∏–Ω–æ—Å–∏—Ç —Ñ–∞–Ω—Ç–∏–∫* "
        "–î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º! –ö–∏–¥–∞–π –º–Ω–µ –µ–≥–æ, –∞ —è –±—É–¥—É –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ!",
        reply_markup=create_game_keyboard()
    )


@play_router.message(F.text == '–ë—Ä–æ—Å–∏—Ç—å —Ñ–∞–Ω—Ç–∏–∫')
async def fantik(message: types.Message):
    if not await check_user_registered(message.from_user.id):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ –æ–±—â–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
        return

    # –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 25% –æ—Å–æ–±–æ–µ —Å–æ–±—ã—Ç–∏–µ
    if random.random() < 0.25:
        event_type = random.choice(list(SPECIAL_EVENTS.keys()))
        response = random.choice(SPECIAL_EVENTS[event_type])

        if event_type == "fantik_lost":
            await message.answer(response)
            await asyncio.sleep(1)
            await message.answer_sticker("CAACAgIAAxkBAAEPo2NoQWsJhI0JBXxHYIhVbdG9tlMlTAACPnIAAnxAuEkLUfaBTwYcIDYE")  # ID —Å—Ç–∏–∫–µ—Ä–∞ —Å –≥—Ä—É—Å—Ç–Ω—ã–º –∫–æ—Ç–æ–º
            return
        else:
            await message.answer(response)
            await asyncio.sleep(1)
            return

    # –û–±—ã—á–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è
    response = random.choice(FANTIK_REACTIONS)

    await message.answer(response)


@play_router.message(F.text == '–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É')
async def menu(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('SELECT 1 FROM users WHERE user_id = ?', (user_id,))
        exists = await cursor.fetchone()
        await cursor.close()

    if not exists:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ –æ–±—â–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start",
            reply_markup=ReplyKeyboardRemove()
        )
        return

    current_status = await get_notification_status(user_id)

    await message.answer(
        f"{random.choice(goodbyes)}\n\n–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:",
        reply_markup=create_main_keyboard(current_status)
    )